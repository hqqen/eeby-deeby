import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image
from sklearn.decomposition import PCA


im_dir = 'E:/Lab Work/class-work/IntroML/hw3/topo_opt_runs/'

images = []
for filename in os.listdir(im_dir):
    try:
        img = Image.open(im_dir+filename).convert('L')
        images.append(np.asarray(img))
    except:
        pass

height,width = images[0].shape

print('Height: %d\tWidth: %d'% (height, width))

X1 = np.reshape(images,[-1,217*434])[0:100] # Reshaped data for convenience; using more than 100 points causes PL to timeout

### Make your modifications below. You can leave the code above alone. ###

#create PCA model which will find give us the dimensional reductions we need
pca = PCA() #mle --> maximum likelihood estimates for pca dimensionlity
X1 = pca.fit_transform(X1)
#print(pca.explained_variance_ratio_)
#print(len(imPrincipal))
imPrincipalVExp = pca.explained_variance_ratio_
i = -1
vExp = 0
while vExp < .95:
    i = i + 1
    vExp = vExp + imPrincipalVExp[i]

numDimsNeeded = i+1 #had to start i at zero so the number of actual dimensions is one higher
component1 = pca.components_[0][0:94178]#[0:100][0]
print(component1.size)

component2 = pca.components_[1][0:94178]#imPrincipal[0:100][1]
component3 = pca.components_[2][0:94178]#imPrincipal[0:100][2]
component4 = pca.components_[3][0:94178]#imPrincipal[0:100][3]
component5 = pca.components_[4][0:94178]#imPrincipal[0:100][4]

fig, ax = plt.subplots(2,2)
fig.suptitle("First Four Principal Components")
ax[0,0].imshow(np.reshape(component1,[217,434]),cmap = 'coolwarm')
ax[0,0].set_title("Component 1")
ax[1,0].imshow(np.reshape(component2,[217,434]),cmap = 'coolwarm')
ax[1,0].set_title("Component 2")
ax[0,1].imshow(np.reshape(component3,[217,434]),cmap = 'coolwarm')
ax[0,1].set_title("Component 3")
ax[1,1].imshow(np.reshape(component4,[217,434]),cmap = 'coolwarm')
ax[1,1].set_title("Component 4")
plt.show()